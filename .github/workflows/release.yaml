name: release

on:
  push:
    branches:
      - master
      - pipeline_config

env:
  PACKAGE_NAME: "tabbyset"
  OWNER: "exactpro"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.new_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Extract new version
        id: new_version
        run: |
          NEW_VERSION=$(uv version --short)
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "New version is $NEW_VERSION"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  push_tag:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag_name.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Push version tag
        uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: v${{ steps.details.outputs.new_version }}

      - name: Export tag name
        id: tag_name
        run: |
          echo "tag_name=v${{ steps.details.outputs.new_version }}" >> $GITHUB_ENV


  setup_and_build:
    needs: [details, check_pypi, push_tag]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --no-dev

      - name: Build source and wheel distribution
        run: uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details, push_tag]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.push_tag.outputs.tag_name }} dist/* --title ${{ needs.push_tag.outputs.tag_name }} --generate-notes
